<?php 
// $Id

/*
 * @file
 * Handles notifying users of updates and scheduled notifications for their
 * files via PHP mail.
 */

/*
 * Implementation of hook_node_insert().
 */
function irods_mailer_node_insert($node) {
  switch ($node->type) {
    case 'project':
      // Get the project type
      $project_type = $node->field_project_type['und']['0']['value'];

      // Get the email template for this type of project.
      $query = new EntityFieldQuery();

      $result = $query
        ->entityCondition('entity_type', 'node')
        ->propertyCondition('title', $project_type . ' Project')
        ->execute();

      $keys = array_keys($result['node']);
      $email_template = node_load($keys[0]);
      $template = $email_template->body['und']['0']['value'];

      // Get the email information from the node.
      $date = $node->field_project_date['und']['0']['value'];
      $duration = $node->field_project_duration['und']['0']['value'];
      $expiration = 
        date('Y-m-d', strtotime($date . ' +' . $duration . ' days'));
      $run = $node->field_project_run['und']['0']['value'];
      $size = $node->field_project_size['und']['0']['value'];

      // Trimmomatic parameter override field
      if ($node->field_project_trim_param['und']) {
        $trim_param = $node->field_project_trim_param['und'][0]['value'];
      }

      // Use defaults
      else $trim_param = ($project_type == 'Assembly') ? 
          "ILLUMINACLIP:adapters.fa:2:40:15 LEADING:3 TRAILING:3 ".
          "SLIDINGWINDOW:4:15" : "ILLUMINACLIP:adapters.fa:2:40:15 TRAILING:3";

      $template = str_replace('%run', $run, $template);
      $template = str_replace('%expiration', $expiration, $template);
      $template = str_replace('%size', $size, $template);
      $template = str_replace('%trim_param', $trim_param, $template);

      /**
          INCLUDE LINK FOR MARKING PROJECT AS COMPLETE

          TODO: Generate a token, and store it in the database.
       */

      // Send mail to each user
      foreach ($node->field_project_users['und'] as $user) {
        // Load the user
        $user_obj = user_load($user['uid']);
        $to = $user_obj->mail;
        $body = $template;

        // Include the username and password information
        $body = str_replace("%username", $user_obj->name, $body);
        $body = str_replace("%irods_password", $user_obj
          ->field_irods_password['und'][0]['value'], $body);

        $subject = 'New iRODS Project: ' . $node->title;

        $headers  = 'MIME-Version: 1.0' . "\r\n";
        $headers .= 'Content-type: text/html; charset=iso-8859-1' . "\r\n";
        $headers .= 'From: iRODS Support <support@arl.arizona.edu>' . "\r\n";

        mail($to, $subject, $body, $headers);
      }

    break;
  }
}

/*
 * Implementation of hook_cron().
 *
 * Cron function that will send mail to users.
 */
function irods_mailer_cron() {
  $subject = "iRODS Mailer Testing";
  $headers = "From: \"iRODS Monitor Site\" <support@arl.arizona.edu>\r\n".
    "X-Mailer: PHP/".phpversion();

  $dprojects = irods_mailer_fetch_drupal_projects();

  // Go through the projects and email users on projects with 60, 30, 14, 7,
  // and 0 days left.
  foreach ($dprojects as $dproject) {
    // Fetch the project
    $project = node_load($dproject['nid']);

    // Get the date for the project.
    $date = strtotime($project->field_project_date['und'][0]['value']);

    // Get the duration for the project.
    $duration = ($project->field_project_duration['und'][0]['value'] * 86400);
    $expiration = $date + $duration;

    $current_day = ceil(($expiration - time())/86400);

    $time_left = FALSE;

    switch ($current_day) {
      case '60':
        $time_left = "two months left";
      break;
      case '30':
        $time_left = "one month left";
      break;
      case '14':
        $time_left = "two weeks left";
      break;
      case '7':
        $time_left = "one week left";
      break;
      case '0':
        $time_left = "no time left";
      break;
    }

    if ($time_left) {

      $message = "Hello hi,\n\nYou have " . $time_left . " on your project: ";
      $message .= $project->title . ".\n\n";

      if ($time_left == "no time left") {
        $message .= "Please let us know by the end of business today if you ";
        $message .= "need more time with your project, otherwise it will be ";
        $message .= "removed at the end of business today.\n\n";
      } else {
        $message .= "Your project is scheduled to expire ";
        $message .= date("l, F j, Y", $expiration) . ". ";
        $message .= "If you have any questions about this expiration, or if ";
        $message .= "you would like to speak with someone about extending ";
        $message .= "your project, please contact BCF support.\n\n";
      }

      $message .= "Thank you,\n\nBCF Support\n\nsupport@arl.arizona.edu";

      $users = $project->field_project_users['und'];

      foreach ($users as $user) {
        $user_obj = user_load($user['uid']);
        $to = $user_obj->mail;
        ini_set("SMTP", "smtp.email.arizona.edu");
        mail($to, $subject, $message, $headers);
      }

      watchdog("cron", 
        "iRODS Mailer cron function called successfully with ".
        count($users)." mail(s) today.",
        NULL, WATCHDOG_DEBUG);
    } else {
      watchdog("cron", 
        "iRODS Mailer cron function called successfully with no mails today.",
        NULL, WATCHDOG_DEBUG);
    }
  }
}

/*
 * Function that fetches the Drupal projects.
 *
 * Returns an array of projects containing arrays of title and nid.
 */
function irods_mailer_fetch_drupal_projects() {
  $query = db_select('node', 'n');
  $query
    ->fields('n', array('nid', 'title'))
    ->condition('type', 'project', '=');

  $nodes = $query->execute()->fetchAll();
  $result = array();

  // $result stores an array containing nid => title pairs
  foreach ($nodes as $node) {
    array_push($result, array(
      'title' => $node->title,
      'nid' => $node->nid
    ));
  }

  return $result;
}

/*
 * Function that notifies users when the project is marked as complete.
 */
function irods_mailer_notify_complete($nid = 0) {
  
  // Make sure we received a nid.
  if (!$nid) {
    $message = "irods_mailer_notify_complete() was called without a node.";
    drupal_set_message(t($message), 'error', FALSE);
    watchdog('irods_mailer', $message, NULL, WATCHDOG_ERROR);

    return;
  }

  // If the node load was unsuccessful, log the error.
  if (!($project = node_load($nid))) {
    $message = "Error trying to load node " . $nid . ".";
    drupal_set_message(t($message), 'error', FALSE);
    watchdog('irods_mailer', $message, NULL, WATCHDOG_ERROR);

    return;
  }

  // If the node is not a project, log the error.
  if (!($project->type == 'project')) {
    $message = "Node " . $nid . " is not of type project.";
    drupal_set_message(t($message), 'error', FALSE);
    watchdog('irods_mailer', $message, NULL, WATCHDOG_ERROR);

    return;
  }

  // Everything should be going smoothly now, so we can notify the users.

}
